#!/usr/bin/env ruby 
# created by udo.waechter@uni-osnabrueck.de, 2009-02-16
#
require 'etc'
require 'fileutils'
# monitory diskusage on /work partition
work="/work"
gmetric = %x{which gmetric}.chomp
exit 0 if $? != 0
exit 0 if !File.exist?(work)

statefile="/var/tmp/workusage.state"
#if the direcotry does not exist, do nothing
exit 0 unless File.exist?(work)
update_running=false

pidfile="/var/run/workusage.pid"

if File.exist?(pidfile)
  pid = File.read(pidfile).chomp
  if %x{ps -p #{pid} |tail -1}.chomp =~ /ruby/
    #puts "Update process running with pid: #{pid}" 
    update_running = true
  end
end
if ! update_running
  #puts "updating pidfile #{pidfile} with pid: #{Process.pid}"
  f = File.open(pidfile,"w")
  f.write(Process.pid)
  f.close
end

#Create or update (every 10 hours) the file 
if (!update_running) && ((! File.exist?(statefile)) || (File.mtime(statefile).strftime("%H").to_i < (Time.new.strftime("%H").to_i - 10)) || File.size(statefile) == 0)
  #puts "Updating state file: #{statefile}"
  contents=Dir.glob("#{work}/??*")
  owners={}
  contents.each { |dir|
    if File.directory?(dir)
      uid=File.stat(dir).uid
      username=Etc.getpwuid(uid).name
      if !owners.key?(username)
	owners[username] = []  
      end
      owners[username].push(dir)
    end
  }

  stats = File.new(statefile,"w")
  owners.keys.each { |username|
    size = 0
    owners[username].each { |dir|
      s = %x{du -s "#{dir}" |cut -f 1}.chomp
      size +=  s.to_f
    }
    stats.write("#{username} #{size}\n")
    %x{#{gmetric} --dmax=10000 --tmax=3600 --units="Megabytes" --name=workusage_#{username} --value=#{size} --type="float"}
  }
  stats.close
else
  #puts "Reading state file: #{statefile}"
  File.new(statefile,"r").each { |line| 
    keyval = line.split(" ")  
    %x{#{gmetric} --dmax=10000 --tmax=3600 --units="Kilobytes" --name=workusage_#{keyval[0]} --value=#{keyval[1]} --type="float"}
  }
end
#remove the pidfile
if ! update_running
  FileUtils.rm(pidfile)
end
